import logging
import multinmrfit.base.spectrum as spectrum
import multinmrfit.base.io as io


# create logger
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")
strm_hdlr = logging.StreamHandler()
strm_hdlr.setFormatter(formatter)
logger.addHandler(strm_hdlr)

# get available models
available_models = io.IoHandler.get_models()

# define data to process
data_path="C:/Bruker/TopSpin4.0.7/data"
experiment="CFE_test"
expno="991"
procno="1"
rowno=3
window=(-0.2, 0.2)

# create Spectrum object
sp = spectrum.Spectrum(data_path, experiment, expno, procno, rowno=rowno, window=window)

# Documentation of Spectrum object
#
#         """
#         Arguments
#         ---------
#         data_path : str
#             path of TopSpin data folder
#         dataset : str
#             dataset name
#         expno : str
#             expno
#         procno : str
#             procno
#         rowno : str | None (optional, default=None)
#             rowno (default: None)
#             note: assume 1D data if None, otherwise 2D data expected
#         window : tuple | None (optional, default=None)
#             lower and upper chemical shifts of the window of interest (in ppm)
#             provided as numeric, full spectrum if None
#        
#         Attributes
#         ----------
#         data_path : str
#             path of TopSpin data folder
#         dataset : str
#             dataset name
#         expno : str
#             expno
#         procno : str
#             procno
#         rowno : str
#             rowno
#         window : tuple | None
#             lower and upper chemical shifts of the window of interest (in ppm)
#             provided as numeric, full spectrum if None
#         ppm : list
#             experimental chemical shifts (in ppm), provided as numeric
#         intensity : str
#             chemical shifts (in ppm), provided as numeric
#         offset : bool
#             True if the spectrum model has an offset, otherwise False,
#             set by build_models()
#         models : dict
#             with signal names as key and the corresponding Model objects as values,
#             set by build_models()
#         params : pd.DataFrame
#             pandas DataFrame containing all parameters of the full spectrum,
#             set by build_models()
#         fit_results : object
#             OptimizeResult object returned by scipy.optimize.minimize, with an 
#             additional 'best_fit' attribute (a list of intensities for the best fit),
#             set by fit()
#        
#         Methods
#         -------
#         __init__(data_path: str, dataset: str, expno: str, procno: str, rowno: str | None, window: tuple | None, data: pd.DataFrame | None)
#             Initialize attributes and load NMR data (from data if not None, otherwise reads 
#             TopSpin files given in data_path, dataset, expno, procno, rowno).
#         peak_picking(threshold: numeric)
#             Performs peak picking using the threshold provided.
#             Returns the peak table as a pandas.DataFrame.
#         build_model(signals: dict, available_models: dict, offset: dict | None)
#             Build the complete model of the spectrum by initializing a model for each 
#             signal (in 'model' attribute), parameters (initial value and lower & upper 
#             bounds, in 'params' attribute) and offset (in 'offset' and 'params' attributes).
#         update_params(signals: dict)
#             Update the value (initial, lower and/or upper bound) of one or several parameters 
#             of one or several signals in 'params' attribute.
#         update_offset(offset: dict | None)
#             Update the value of the offset (in 'offset' and 'params' attributes). Offset is
#             removed is set to None.
#         simulate(params: dict | None)
#             Simulate spectrum. If params is None (default), initial values (in 'params' attribute) 
#             are used for simulation.
#             Returns a list of simulated intensities.
#         fit(method: str)
#             Fit experimental spectrum using the 'L-BFGS-B' (default) or 'differential_evolution' 
#             optimization methods & calculate integral of each signal, update 'params' and 
#             'fit_results' attributes.
#             Returns an OptimizeResult object generated by scipy.optimize.minimize.
#         integrate(params: dict | None, bounds: list)
#             Integrate each signal of the full spectrum over the range given in 'bounds' 
#             (default: [-100.0, 300.0]).
#             If params is None, initial values (in 'params' attribute) are used for simulation.
#             Returns integrals as a dict.
#         plot(exp: bool, ini: bool, fit: bool, pp: pd.DataFrame | None)
#             Plot the following data: experimental spectrum (exp, default: True), spectrum simulated from 
#             initial parameters values (see 'params' attribute) (ini, default: False), spectrum simulated 
#             for the best fit (fit, default: False), and peak picking results (pp, default: None).
#             Returns the figure as a pyplot.subplots.make_subplots object.
#         """


# perform peak picking
peak_table = sp.peak_picking(float(1e8))

# show results
print(peak_table)

# plot peak picking results
fig = sp.plot(pp=peak_table)
fig.show()

# USER DEFINE SIGNALS WITH HELP OF PEAK TABLE

signals = {"singlet_TSP": {"model":"singlet", "par": {"x0": {"ini":0.0, "lb":-0.05, "ub":0.05}}}}

#signals = {"singlet_TSP": {"model":"singlet", "par": {"x0": {"ini":0.0, "lb":-0.05, "ub":0.05}}},
#           "doublet_TSP": {"model":"doublet", "par": {"x0": {"ini":-0.01, "lb":-0.01, "ub":0.01}, "J1": {"ini":0.147, "lb":0.14, "ub":0.15}, "lw": {"ini":0.001}}}}

# build model containing all signals
sp.build_model(signals=signals, available_models=available_models)

# params can be updated at any time
sp.update_params({"singlet_TSP": {"par": {"intensity": {"ini":1e9, "ub":1e12}}}})
#sp.update_params({"doublet_TSP": {"par": {"intensity": {"ini":1e8, "lb":5e7, "ub":1e9}}}})
sp.update_offset(offset={})
print(sp.params)

# fit spectrum
sp.fit()

# display estimated parameters
sp.params

# plot sim vs meas
fig = sp.plot(ini=True, fit=True)
fig.show()

